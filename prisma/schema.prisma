//🧩Don't Edit this file.✨Generated in Mon Dec 16 2024 18:41:14 GMT+0800 (中国标准时间)✨

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ReXAppStore {
  productID    String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  /// app名称
  productName  String
  /// app描述
  productDesc  String
  /// app下载地址
  downloadUrl  String
  /// app下载次数
  downloadNum  Int      @default(0)
  /// app下载地址附加信息
  downloadInfo String
  /// app图标
  iconUrl      String?
  /// app版本
  version      String?
  /// app大小
  size         String?
  /// app作者
  author       String?
  /// app上传者
  uploader     User     @relation(fields: [userID], references: [userID])
  /// app上传者ID
  userID       String   @db.ObjectId
}

model Like {
  likeID         String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  /// 用户
  user           User               @relation(fields: [userID], references: [userID])
  /// 用户ID
  userID         String             @db.ObjectId
  /// 点赞的帖子
  topic          ForumTopic?        @relation(fields: [topicID], references: [topicID])
  /// 帖子ID
  topicID        String?            @db.ObjectId
  /// 点赞的评论
  topicComment   ForumTopicComment? @relation(fields: [topicCommentID], references: [forumTopicCommentID])
  /// 点赞的评论ID
  topicCommentID String?            @db.ObjectId
}

model Tag {
  tagID                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  /// 标签名
  tagName               String               @unique
  /// 标签描述
  tagDescription        String?
  /// 标签浏览量
  tagViewCount          Int                  @default(0)
  /// 链接的脚本
  browserScriptStore    BrowserScriptStore[] @relation(fields: [browserScriptStoreIDs], references: [browserScriptStoreID])
  /// 链接的脚本ID
  browserScriptStoreIDs String[]             @db.ObjectId
  /// 论坛话题
  forumTopic            ForumTopic[]         @relation(fields: [forumTopicIDs], references: [topicID])
  /// 论坛话题ID
  forumTopicIDs         String[]             @db.ObjectId

  @@fulltext([tagName, tagDescription])
}

model ForumTopicComment {
  /// 评论ID
  forumTopicCommentID String              @id @default(auto()) @map("_id") @db.ObjectId
  /// 创建时间
  createdAt           DateTime            @default(now())
  /// 更新时间
  updatedAt           DateTime            @updatedAt
  /// 评论内容 支持markdown
  content             String
  /// topic作者
  author              User                @relation(fields: [authorID], references: [userID])
  /// 作者ID
  authorID            String              @db.ObjectId
  /// 点赞
  likes               Like[]
  /// 父评论
  parent              ForumTopicComment?  @relation("ForumTopicCommentToForumTopicComment", fields: [parentID], references: [forumTopicCommentID], onDelete: NoAction, onUpdate: NoAction)
  /// 父评论ID
  parentID            String?             @db.ObjectId
  /// 子评论
  children            ForumTopicComment[] @relation("ForumTopicCommentToForumTopicComment")
  /// 话题
  topic               ForumTopic          @relation(fields: [topicID], references: [topicID])
  /// 话题ID
  topicID             String              @db.ObjectId
  /// IP
  ip                  String?

  @@fulltext([content])
}

model ForumTopic {
  /// 话题ID
  topicID           String              @id @default(auto()) @map("_id") @db.ObjectId
  /// 创建时间
  createdAt         DateTime            @default(now())
  /// 更新时间
  updatedAt         DateTime            @updatedAt
  /// 话题名称
  topicName         String?
  /// 话题描述
  topicDesc         String?
  /// 话题内容 支持markdown
  topicContent      String?
  /// topic作者
  author            User                @relation(fields: [authorID], references: [userID])
  /// 作者ID
  authorID          String              @db.ObjectId
  /// 话题状态
  status            ForumTopicStatus
  /// 话题标签
  tags              Tag[]               @relation(fields: [tagIDs], references: [tagID])
  /// 标签ID
  tagIDs            String[]            @db.ObjectId
  /// 话题浏览量
  viewCount         Int                 @default(0)
  /// 话题展现量
  displayCount      Int                 @default(0)
  /// 话题点赞
  likes             Like[]
  /// 话题评论
  ForumTopicComment ForumTopicComment[]

  @@fulltext([topicName, topicDesc, topicContent])
}

/// 闪电：用户App Store订阅
model UserAppStoreSubscribe {
  userAppStoreSubscribeID String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  /// 原始交易ID
  originalTransactionID   String

  user   User   @relation(fields: [userID], references: [userID])
  userID String @db.ObjectId

  /// 添加索引
  @@index([userID])
}

/// 闪电：浏览器书签
model BrowserBookMark {
  browserBookMarkID String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  /// 标题
  bookMarkTitle     String
  /// 链接
  bookMarkLink      String
  /// 图标
  bookMarkIcon      String
  /// 颜色
  bookMarkColor     String
  /// 索引
  bookMarkIndex     Int
  /// 用户
  user              User     @relation(fields: [userID], references: [userID])
  /// 用户ID
  userID            String   @db.ObjectId

  /// 添加索引
  @@index([userID])
}

/// 闪电：浏览器脚本
model BrowserScript {
  browserScriptID String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  /// 脚本
  scriptContent   String
  /// 脚本解析后的内容
  scriptInfo      String
  /// 上传的用户
  user            User     @relation(fields: [userID], references: [userID])
  /// 上传的用户ID
  userID          String   @db.ObjectId
}

/// 闪电：浏览器脚本库
model BrowserScriptStore {
  browserScriptStoreID String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  /// 脚本
  scriptContent        String
  /// 脚本解析后的内容
  scriptInfo           String
  /// 浏览量
  viewCount            Int
  scriptStatus         ScriptStatus
  /// 上传者
  uploader             User         @relation(fields: [uploaderUserID], references: [userID])
  /// 上传者ID
  uploaderUserID       String       @db.ObjectId
  /// 标签
  tags                 Tag[]        @relation(fields: [tagIDs], references: [tagID])
  tagIDs               String[]     @db.ObjectId
}

/// 闪电：浏览器足迹
model BrowserTrack {
  browserTrackID String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  /// 标题
  webPageTitle   String
  /// 链接
  webPageLink    String
  /// 用户
  user           User     @relation(fields: [userID], references: [userID])
  /// 用户ID
  userID         String   @db.ObjectId

  @@index([userID])
}

model ShopSubscribePackage {
  /// 套餐ID
  packageID    String          @id @default(auto()) @map("_id") @db.ObjectId
  /// 创建时间
  createdAt    DateTime        @default(now())
  /// 更新时间
  updatedAt    DateTime        @updatedAt
  /// 套餐名称
  name         String
  /// 套餐描述
  description  String
  /// 套餐价格 RMB
  price        Float
  /// 套餐天数
  days         Int
  /// 套餐创建者
  author       User            @relation(fields: [authorID], references: [userID])
  /// 套餐创建者ID
  authorID     String          @db.ObjectId
  /// 套餐是否上架
  isOnSale     Boolean         @default(true)
  /// 套餐下的订阅
  GPTSubscribe ShopSubscribe[]
}

model ShopSubscribe {
  /// 评论ID
  subscribeID    String               @id @default(auto()) @map("_id") @db.ObjectId
  /// 创建时间
  createdAt      DateTime             @default(now())
  /// 更新时间
  updatedAt      DateTime             @updatedAt
  /// 用户
  user           User                 @relation(fields: [userID], references: [userID])
  /// 用户ID
  userID         String               @db.ObjectId
  /// 到期天数
  days           Int
  /// 套餐
  package        ShopSubscribePackage @relation(fields: [packageID], references: [packageID])
  /// 套餐ID
  packageID      String               @db.ObjectId
  /// 是否手动创建的订阅
  isManualCreate Boolean              @default(false)
}

model UserData {
  userDataID String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userDataKey   String @unique
  userDataValue String

  user   User   @relation(fields: [userID], references: [userID])
  userID String @db.ObjectId
}

/// 用户登录标识符
model UserIdentifier {
  userIdentifierID String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  /// 登录设备类型
  loginType        ILoginType
  /// 登录的客户端 是哪个APP
  loginClient      String?
  /// 登录的设备名
  loginDeviceName  String?
  /// 登录的IP
  loginIP          String?
  /// 登录的渠道
  loginMethod      ILoginMethod
  /// 登录的标识符
  identifier       String?
  /// 登录的用户
  user             User         @relation(fields: [userID], references: [userID])
  /// 登录的用户ID
  userID           String       @db.ObjectId
}

model UserReceipt {
  userReceiptID String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // 订单ID
  orderID       String
  /// 订单金额 单位元 保留两位小数
  amount        Float
  /// 用户
  user          User           @relation(fields: [userID], references: [userID])
  /// 用户ID
  userID        String         @db.ObjectId
  /// 订单状态
  receiptStatus IReceiptStatus
  /// 订单类型
  payType       String
  /// 随机字符串 用于鉴定
  nonceStr      String?
}

/// 角色
model Role {
  roleID          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  /// 角色的名称
  roleName        String   @unique
  /// 角色的描述
  roleDescription String?
  /// 角色是否公开
  isPublic        Boolean
  /// 角色的权限
  permissions     String[]
  /// 角色是否注册即享有
  isDefault       Boolean?
  /// 角色的权限ID
  permissionIDs   String[] @db.ObjectId
  /// 角色的用户
  users           User[]   @relation(fields: [userIDs], references: [userID])
  /// 角色的用户ID
  userIDs         String[] @db.ObjectId
}

/// 用户
model User {
  userID                String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  /// 用户的用户名
  username              String
  /// 用户的密码
  password              String?
  /// 用户的ip
  ip                    String?
  /// 用户的昵称
  saying                String?
  /// 用户的头像
  avatar                String?
  /// 用户的邮箱
  email                 String?
  /// 用户的手机号
  phone                 String?
  /// 用户是否被删除
  isDeleted             Boolean?                @default(false)
  /// 用户余额
  balance               Float?
  /// 用户绑定的微软账号 - 标识符
  microsoftID           String?
  /// 用户的登录标识符
  identifiers           UserIdentifier[]
  /// 用户的浏览器书签
  BrowserBookMark       BrowserBookMark[]
  /// 用户的浏览器足迹
  BrowserTrack          BrowserTrack[]
  /// 用户的App Store订阅
  UserAppStoreSubscribe UserAppStoreSubscribe[]
  /// 用户的角色
  roles                 Role[]                  @relation(fields: [roleIDs], references: [roleID])
  /// 用户的角色ID
  roleIDs               String[]                @db.ObjectId
  /// 用户的浏览器脚本
  BrowserScript         BrowserScript[]
  /// 用户在商店创建的浏览器脚本
  BrowserScriptStore    BrowserScriptStore[]
  /// 用户的数据
  UserData              UserData[]
  /// 用户的支付收据
  UserReceipt           UserReceipt[]
  /// 用户的帖子
  forumTopics           ForumTopic[]
  /// 用户的帖子评论
  forumTopicComments    ForumTopicComment[]
  /// 用户的点赞
  likes                 Like[]
  /// 用户的ReX App Store上传记录
  AppStore              ReXAppStore[]
  /// 用户的订阅
  ShopSubscribe         ShopSubscribe[]
  /// 用户创建的订阅
  ShopSubscribePackage  ShopSubscribePackage[]

  @@fulltext([username])
}

enum ScriptStatus {
  Pending
  Draft
  Published
}

enum ForumTopicStatus {
  Pending
  Draft
  Published
}

/// 登录设备类型
enum ILoginType {
  WatchOS
  HarmonyOS_Wearable
  Android
  Web
  IOS
  Panel
}

/// 登录方式
enum ILoginMethod {
  QrCode
  PhoneCode
  EmailCode
  UsernamePassword
  Microsoft
}

enum IReceiptStatus {
  Pending
  Success
  Failed
}
